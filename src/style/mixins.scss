@mixin button {
  font-family: inherit;
  display: inline-flex;
  border-radius: var(--input-border-radius);
  padding: var(--input-padding-vertical) var(--input-padding-horizontal);
  background: transparent;
  font-size: 1em;
  font-weight: normal;
  color: var(--color-text);
  border: 1px solid var(--color-border);
  user-select: none;
  align-items: center;
  gap: 0.4em;
  text-decoration: none;

  // Apply disabled styles if :disabled pseudo-class or .disabled class is present
  &:disabled,
  &.disabled {
    border-color: var(--color-border-disabled);
    color: var(--color-text-muted);
    pointer-events: none;
  }

  // Apply hover styles only if NOT disabled (neither :disabled nor .disabled)
  &:hover:not(:disabled):not(.disabled) {
    border-color: var(--color-border-focus);
    color: var(--color-text-active);
  }

  // Apply active styles only if NOT disabled
  &:active:not(:disabled):not(.disabled) {
    background: rgba(0, 0, 0, 0.5);
    border-color: var(--color-accent);
  }

  // Apply focus styles only if NOT disabled
  // Note: We keep :focus and :focus-within separate from hover/active
  // The &:disabled, &.disabled rule above should override these if necessary
  &:focus:not(:disabled):not(.disabled),
  &:focus-within:not(:disabled):not(.disabled) {
    outline: none;
    border-color: var(--color-accent);
  }
}

@mixin input {
  font-family: inherit;
  border-radius: var(--input-border-radius);
  padding: var(--input-padding-vertical) var(--input-padding-horizontal);
  background: var(--input-background);
  font-size: 1em;
  font-weight: normal;
  color: var(--color-text);
  border: 1px solid var(--color-border);

  &:hover {
    border-color: var(--color-border-focus);
  }

  &:disabled, &.disabled {
    color: var(--color-text-muted);
    border-color: var(--color-border-disabled);
  }

  &:focus {
    outline: none;
    border-color: var(--color-accent);
    color: var(--color-text-active);
  }
}

@mixin editor-control {
  position: fixed;
  align-items: center;
  justify-content: center;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  z-index: 1000;
  color: white;
  border-radius: 0.5rem;
  flex-wrap: nowrap;
  user-select: none;
  background: rgba(0, 0, 0, 0.5);

  button:first-child {
    border-top-left-radius: var(--input-border-radius);
    border-bottom-left-radius: var(--input-border-radius);
    border-right: none;
  }

  button:last-child {
    border-top-right-radius: var(--input-border-radius);
    border-bottom-right-radius: var(--input-border-radius);
    border-left: none;
  }

  svg {
    width: 1em;
    height: 1em;
  }

  button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    background: transparent;
    color: white;
    border: 2px solid var(--color-accent);
  }

  button:hover,
  button:focus {
    background: var(--color-accent);
    outline: none;
  }
  button:active {
    color: black;
  }

  div {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 1em;
    height: 2.5rem;
    border: 2px solid var(--color-accent);
    border-left: 0;
    border-right: 0;
    box-sizing: border-box;
  }
}